import os
import sys
sys.path.append(os.getenv('PYNAUNET_PATH'))

import numpy as np
from tomlkit.toml_file import TOMLFile

from naunet.species import Species
from @PYMODNAME@ import Naunet, NaunetData

def get_element_abund(species, abundance, target):
    speclist = [Species(s) for s in species]
    abund = np.sum([ab * s.element_count.get(target, 0) for s, ab in zip(speclist, abundance)])
    return abund

config_path = os.getenv('NAUNET_CONFIG_PATH')
config = TOMLFile(os.path.join(config_path, "naunet_config.toml"))
content = config.read()
chemistry = content["chemistry"]
heating = chemistry["heating"]
cooling = chemistry["cooling"]
has_thermal = True if heating or cooling else False
summary = content["summary"]
species = summary["list_of_species"]
elements = summary["list_of_elements"]
nspec = len(species)
nelem = len(elements)

naunet_solver = Naunet()


Species.set_known_elements(elements + ["E"])
nH = 2e4;



y = np.ones(len(species)+has_thermal) * 1e-40
y[species.index("H2")] = 0.5 * nH
y[species.index("H")]  = 5e-5 * nH
y[species.index("HE")] = 9.75e-2 * nH
y[species.index("N")]  = 7.5e-5 * nH
y[species.index("O")]  = 1.8e-4 * nH
y[species.index("CO")] = 1.4e-4 * nH
y[species.index("S")]  = 8.0e-8 * nH
y[species.index("SI")] = 8.0e-9 * nH
y[species.index("MG")] = 7.0e-9 * nH
y[species.index("CL")] = 4.0e-9 * nH


ref = np.array([get_element_abund(species, y, elem) for elem in elements])
ref /= get_element_abund(species, y, "H")
print(f"Reference: {ref}")

naunet_solver.SetReferenceAbund(ref)
naunet_solver.SetReferenceAbund(y, 1)


y = np.ones(len(species)+has_thermal) * 1e-40
y[species.index("H2")] = 0.4 * nH
y[species.index("H")]  = 1e-3 * nH
y[species.index("HE")] = 1.9e-1 * nH
y[species.index("N")]  = 7.5e-5 * nH
y[species.index("O")]  = 8.0e-5 * nH
y[species.index("CO")] = 2.8e-4 * nH
y[species.index("S")]  = 4.0e-8 * nH
y[species.index("SI")] = 2.0e-9 * nH
y[species.index("MG")] = 2.0e-9 * nH
y[species.index("CL")] = 1.0e-9 * nH


upd = np.array([get_element_abund(species, y, elem) for elem in elements])
upd /= get_element_abund(species, y, "H")
print(f"Updated: {upd}")

naunet_solver.Renorm(y)

res = np.array([get_element_abund(species, y, elem) for elem in elements])
res /= get_element_abund(species, y, "H")
print(f"Updated: {res}")

if any((res - ref) > 1e-3):
    raise RuntimeError("Renorm test failed")